USE northwind;

-- Productos m치s baratos y caros de nuestra la bases de datos:
-- Desde la divisi칩n de productos nos piden conocer el precio de los productos que tienen el precio m치s alto y m치s bajo. Dales el alias lowestPrice y highestPrice.--

SELECT*
FROM products;


SELECT ProductName, MAX(UnitPrice) AS highestPrice
FROM products
GROUP BY ProductName
ORDER BY highestPrice DESC;

SELECT ProductName, MIN(UnitPrice) AS lowesttPrice
FROM products
GROUP BY ProductName
ORDER BY lowesttPrice ASC;

--  Conociendo el numero de productos y su precio medio: 
-- Adicionalmente nos piden que dise침emos otra consulta para conocer el n칰mero de productos y el precio medio de todos ellos (en general, no por cada producto).

SELECT ProductName, COUNT(*) AS total_productos
FROM products
GROUP BY ProductName
ORDER BY total_productos DESC;

SELECT ProductName, ROUND(AVG(UnitPrice), 2) AS precio_medio
FROM products
GROUP BY ProductName
ORDER BY precio_medio DESC;

SELECT COUNT(ProductName) AS total_productos, ROUND(AVG(UnitPrice), 2) AS precio_medio_total
FROM products;

-- Sacad la m치xima y m칤nima carga de los pedidos de UK:
-- Nuestro siguiente encargo consiste en preparar una consulta que devuelva la m치xima y m칤nima cantidad de carga para un pedido (freight) enviado a Reino Unido (United Kingdom).

SELECT *
FROM orders;

SELECT ShipCountry, MAX(freight) AS carga_maxima
FROM orders
GROUP BY ShipCountry
HAVING Shipcountry IN ("UK");

SELECT ShipCountry, MIN(freight) AS carga_minima
FROM orders
GROUP BY ShipCountry
HAVING Shipcountry IN ("UK");

-- Qu칠 productos se venden por encima del precio medio: 
-- Despu칠s de analizar los resultados de alguna de nuestras consultas anteriores, desde el departamento de Ventas quieren conocer qu칠 productos en concreto se venden por encima del precio medio para todos los productos de la empresa, ya que sospechan que dicho n칰mero es demasiado elevado. Tambi칠n quieren que ordenemos los resultados por su precio de mayor a menor.
-- 游늷NOTA: para este ejercicio puedes necesitar dos consultas separadas y usar el resultado de la primera para filtrar la segunda.

SELECT COUNT(ProductName) AS total_productos, ROUND(AVG(UnitPrice), 2) AS precio_medio_total
FROM products;

SELECT ProductName, UnitPrice,
	CASE
		WHEN UnitPrice > 28.87 THEN "Por encima de la media"
		ELSE "Por debajo de la media" END AS precios
	FROM products
    ORDER BY UnitPrice DESC;
    
-- Qu칠 productos se han descontinuado:
-- De cara a estudiar el hist칩rico de la empresa nos piden una consulta para conocer el n칰mero de productos que se han descontinuado. 
-- El atributo Discontinued es un booleano: si es igual a 1 el producto ha sido descontinuado.

SELECT *
FROM products;

SELECT COUNT(Discontinued) AS cantidad_productos_descontinuados
FROM products
WHERE Discontinued = 1;

--  Detalles de los productos de la query anterior:
-- Adicionalmente nos piden detalles de aquellos productos no descontinuados, sobre todo el ProductID y ProductName. 
-- Como puede que salgan demasiados resultados, nos piden que los limitemos a los 10 con ID m치s elevado, que ser치n los m치s recientes. 
-- No nos pueden decir del departamento si habr치 pocos o muchos resultados, pero lo limitamos por si acaso.

SELECT ProductID, ProductName
FROM products
WHERE Discontinued = 0
LIMIT 10;

-- Relaci칩n entre n칰mero de pedidos y m치xima carga:
-- Desde log칤stica nos piden el n칰mero de pedidos y la m치xima cantidad de carga de entre los mismos (freight) que han sido enviados por cada empleado (mostrando el ID de empleado en cada caso).
SELECT*
FROM orders;

SELECT EmployeeID, COUNT(*) AS pedidos_por_empleado, MAX(freight) maxima_carga
FROM orders
GROUP BY EmployeeID;


-- Descartar pedidos sin fecha y ord칠nalos:
-- Una vez han revisado los datos de la consulta anterior, nos han pedido afinar un poco m치s el "disparo". 
-- En el resultado anterior se han incluido muchos pedidos cuya fecha de env칤o estaba vac칤a, por lo que tenemos que mejorar la consulta en este aspecto. 
-- Tambi칠n nos piden que ordenemos los resultados seg칰n el ID de empleado para que la visualizaci칩n sea m치s sencilla.

SELECT EmployeeID, COUNT(*) AS pedidos_por_empleado, MAX(freight) maxima_carga 
FROM orders
WHERE ShippedDate IS NOT NULL
GROUP BY EmployeeID;

-- BONUS --
/*N칰meros de pedidos por d칤a:

El siguiente paso en el an치lisis de los pedidos va a consistir en conocer mejor la distribuci칩n de los mismos seg칰n las fechas.
Por lo tanto, tendremos que generar una consulta que nos saque el n칰mero de pedidos para cada d칤a, mostrando de manera
separada el d칤a (DAY()), el mes (MONTH()) y el a침o (YEAR()).*/

SELECT COUNT(OrderID) AS Pedido, DAY(OrderDate) AS dia ,MONTH(OrderDate) AS mes,YEAR(OrderDate) AS a침o
FROM orders
GROUP BY OrderDate;

/*N칰mero de pedidos por mes y a침o:
La consulta anterior nos muestra el n칰mero de pedidos para cada d칤a concreto, pero esto es demasiado detalle.
Genera una modificaci칩n de la consulta anterior para que agrupe los pedidos por cada mes concreto de cada a침o.
*/

SELECT COUNT(OrderID) AS Pedido, MONTH(OrderDate) AS mes,YEAR(OrderDate) AS a침o
FROM orders
GROUP BY MONTH(OrderDate), YEAR(OrderDate);

/*Seleccionad las ciudades con 4 o m치s empleadas:
Desde recursos humanos nos piden seleccionar los nombres de las ciudades con 4 o m치s empleadas
de cara a estudiar la apertura de nuevas oficinas.
*/

SELECT city, COUNT(EmployeeID)
FROM employees
GROUP BY city 
HAVING COUNT(EmployeeID) >= 4;

/*Cread una nueva columna bas치ndonos en la cantidad monetaria:

Necesitamos una consulta que clasifique los pedidos en dos categor칤as ("Alto" y "Bajo")
en funci칩n de la cantidad monetaria total que han supuesto: por encima o por debajo de 2000 euros.*/

SELECT OrderID, UnitPrice,
	CASE
		WHEN UnitPrice < 2000 THEN 'Alto'
        ELSE 'Bajo' END AS cantidad
	FROM orderdetails
    ORDER BY UnitPrice DESC;
    

